/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.33).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import io.swagger.model.SearchData;
import io.swagger.model.TitleData;
import io.swagger.model.TokenCredentials;
import io.swagger.model.UserCredentials;
import io.swagger.model.UserDetails;
import io.swagger.model.UserRating;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.bind.annotation.CookieValue;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2022-04-02T22:29:35.803425-04:00[America/New_York]")
@Validated
public interface ApiApi {

    @Operation(summary = "Invalidate access token", description = "Invalidates the access token passed in the Authentication header", security = {
        @SecurityRequirement(name = "bearerAuth")    }, tags={ "Authentication" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Success"),
        
        @ApiResponse(responseCode = "401", description = "Unauthorized") })
    @RequestMapping(value = "/api/auth/token",
        method = RequestMethod.DELETE)
    ResponseEntity<Void> apiAuthTokenDelete();


    @Operation(summary = "Login to MovieWatchlistAPI", description = "User passes in basic credentials in exchange for access token upon successful authentication", security = {
        @SecurityRequirement(name = "basicAuth")    }, tags={ "Authentication" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Success", content = @Content(mediaType = "application/json", schema = @Schema(implementation = TokenCredentials.class))),
        
        @ApiResponse(responseCode = "401", description = "Unauthorized") })
    @RequestMapping(value = "/api/auth/token",
        produces = { "application/json", "application/xml" }, 
        method = RequestMethod.POST)
    ResponseEntity<TokenCredentials> apiAuthTokenPost();


    @Operation(summary = "Search the IMDB database", description = "Pass in a query string to get a list of media to add to your watchlist", security = {
        @SecurityRequirement(name = "bearerAuth")    }, tags={ "Media" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Success", content = @Content(mediaType = "application/json", schema = @Schema(implementation = SearchData.class))) })
    @RequestMapping(value = "/api/media",
        produces = { "application/json", "application/xml" }, 
        method = RequestMethod.GET)
    ResponseEntity<SearchData> apiMediaGet(@NotNull @Parameter(in = ParameterIn.QUERY, description = "" ,required=true,schema=@Schema()) @Valid @RequestParam(value = "query", required = true) String query);


    @Operation(summary = "Get metadata about specific media", description = "Get additional metadata regarding a specific media by ID", security = {
        @SecurityRequirement(name = "bearerAuth")    }, tags={ "Media" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Success", content = @Content(mediaType = "application/json", schema = @Schema(implementation = TitleData.class))) })
    @RequestMapping(value = "/api/media/{mediaId}",
        produces = { "application/json", "application/xml" }, 
        method = RequestMethod.GET)
    ResponseEntity<TitleData> apiMediaMediaIdGet(@Parameter(in = ParameterIn.PATH, description = "", required=true, schema=@Schema()) @PathVariable("mediaId") String mediaId);


    @Operation(summary = "Update the ratings for the provided media", description = "Rate the media item on a scale of 1 to 5 stars", security = {
        @SecurityRequirement(name = "bearerAuth")    }, tags={ "Media" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "201", description = "Success") })
    @RequestMapping(value = "/api/media/{mediaId}/ratings",
        consumes = { "application/json", "application/xml" }, 
        method = RequestMethod.POST)
    ResponseEntity<Void> apiMediaMediaIdRatingsPost(@Parameter(in = ParameterIn.PATH, description = "", required=true, schema=@Schema()) @PathVariable("mediaId") String mediaId, @Parameter(in = ParameterIn.DEFAULT, description = "", schema=@Schema()) @Valid @RequestBody UserRating body);


    @Operation(summary = "Get list of users", description = "Get a list of registered users", tags={ "Users" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Success", content = @Content(mediaType = "application/json", schema = @Schema(implementation = UserDetails.class))) })
    @RequestMapping(value = "/api/users",
        produces = { "application/json", "application/xml" }, 
        method = RequestMethod.GET)
    ResponseEntity<UserDetails> apiUsersGet(@NotNull @Parameter(in = ParameterIn.QUERY, description = "" ,required=true,schema=@Schema()) @Valid @RequestParam(value = "query", required = true) String query);


    @Operation(summary = "Create new user", description = "Register new user to the API", tags={ "Users" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "201", description = "Success") })
    @RequestMapping(value = "/api/users",
        consumes = { "application/json", "application/xml" }, 
        method = RequestMethod.POST)
    ResponseEntity<Void> apiUsersPost(@Parameter(in = ParameterIn.DEFAULT, description = "", schema=@Schema()) @Valid @RequestBody UserCredentials body);

}

