/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.33).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api.watchlist;

import io.swagger.model.media.MediaItem;
import io.swagger.model.watchlist.Watchlist;
import io.swagger.model.watchlist.WatchlistCreateRequest;
import io.swagger.model.watchlist.WatchlistVisiblity;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;

import javax.validation.Valid;
import java.util.UUID;

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2022-04-02T22:43:09.213512-04:00[America/New_York]")
@Validated
public interface WatchlistApi {

    @Operation(summary = "Creates a new Watchlist for the calling user", description = "Creates a new Watchlist for the calling user ", tags={ "Watchlist" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "201", description = "item created", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Watchlist.class))) })
    @RequestMapping(value = "/watchlist",
        produces = { "application/json", "application/xml" }, 
        method = RequestMethod.POST)
    ResponseEntity<Watchlist> watchlistPost(@Parameter(in = ParameterIn.DEFAULT, description = "Watchlist to create", schema=@Schema()) @Valid @RequestBody WatchlistCreateRequest body);


    @Operation(summary = "Retrieve Watchlist", description = "Gets an existing watchlist for the calling user if watchlist exists and the user has permissions to view the Watchlist. ", tags={ "Watchlist" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Item retrieved", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Watchlist.class))),
        
        @ApiResponse(responseCode = "404", description = "Watchlist not found for user") })
    @RequestMapping(value = "/watchlist/{watchlist_id}",
        produces = { "application/json", "application/xml" }, 
        method = RequestMethod.GET)
    ResponseEntity<Watchlist> watchlistWatchlistIdGet(@Parameter(in = ParameterIn.PATH, description = "The id of the watchlist to retrieve", required=true, schema=@Schema()) @PathVariable("watchlist_id") UUID watchlistId);


    @Operation(summary = "Set Visibility", description = "Sets the IsPublic attribute for the watchlist ", tags={ "Watchlist" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Media deleted from Watchlist"),
        
        @ApiResponse(responseCode = "404", description = "Watchlist or Media not found for user") })
    @RequestMapping(value = "/watchlist/{watchlist_id}/media/{media_id}",
        method = RequestMethod.DELETE)
    ResponseEntity<Void> watchlistWatchlistIdMediaMediaIdDelete(@Parameter(in = ParameterIn.PATH, description = "The id of the watchlist to retrieve", required=true, schema=@Schema()) @PathVariable("watchlist_id") UUID watchlistId, @Parameter(in = ParameterIn.PATH, description = "The id of the media to delete", required=true, schema=@Schema()) @PathVariable("media_id") String mediaId);


    @Operation(summary = "Adds Media", description = "Adds a media object to the watchlist ", tags={ "Watchlist" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "201", description = "item created", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Watchlist.class))),
        
        @ApiResponse(responseCode = "404", description = "Watchlist not found for user") })
    @RequestMapping(value = "/watchlist/{watchlist_id}/media",
        produces = { "application/json", "application/xml" }, 
        consumes = { "application/json", "application/xml" }, 
        method = RequestMethod.POST)
    ResponseEntity<Watchlist> watchlistWatchlistIdMediaPost(@Parameter(in = ParameterIn.PATH, description = "The id of the watchlist to retrieve", required=true, schema=@Schema()) @PathVariable("watchlist_id") UUID watchlistId, @Parameter(in = ParameterIn.DEFAULT, description = "Media data to add to watchlist", schema=@Schema()) @Valid @RequestBody MediaItem body);


    @Operation(summary = "Set Visibility", description = "Sets the IsPublic attribute for the watchlist ", tags={ "Watchlist" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Watchlist updated", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Watchlist.class))),
        
        @ApiResponse(responseCode = "404", description = "Watchlist not found for user") })
    @RequestMapping(value = "/watchlist/{watchlist_id}/visibility",
        produces = { "application/json", "application/xml" }, 
        consumes = { "application/json", "application/xml" }, 
        method = RequestMethod.PUT)
    ResponseEntity<Watchlist> watchlistWatchlistIdVisibilityPut(@Parameter(in = ParameterIn.PATH, description = "The id of the watchlist to retrieve", required=true, schema=@Schema()) @PathVariable("watchlist_id") UUID watchlistId, @Parameter(in = ParameterIn.DEFAULT, description = "", schema=@Schema()) @Valid @RequestBody WatchlistVisiblity body);

}

